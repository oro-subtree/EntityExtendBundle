<?php

namespace Oro\Bundle\EntityExtendBundle\Extend;

use Symfony\Component\HttpKernel\KernelInterface;
use Symfony\Component\Process\PhpExecutableFinder;
use Symfony\Component\Process\Process;

use Oro\Bundle\PlatformBundle\Maintenance\Mode as MaintenanceMode;
use Oro\Bundle\EntityConfigBundle\Config\ConfigInterface;
use Oro\Bundle\EntityConfigBundle\Config\ConfigManager;

class EntityProcessor
{
    /**
     * @var KernelInterface
     */
    protected $kernel;

    /**
     * @var MaintenanceMode
     */
    protected $maintenance;

    /**
     * @var ConfigManager
     */
    protected $configManager;

    /**
     * @param KernelInterface $kernel
     * @param MaintenanceMode $maintenance
     * @param ConfigManager $configManager
     */
    public function __construct(
        KernelInterface $kernel,
        MaintenanceMode $maintenance,
        ConfigManager $configManager
    ) {
        $this->kernel = $kernel;
        $this->maintenance = $maintenance;
        $this->configManager = $configManager;
    }

    /**
     * Update database and generate extended field
     *
     * @param bool $generateProxies
     * @return bool
     */
    public function updateDatabase($generateProxies = true)
    {
        set_time_limit(0);

        $console = escapeshellarg($this->getPhp()) . ' ' . escapeshellarg($this->kernel->getRootDir() . '/console');
        $env     = $this->kernel->getEnvironment();

        $commands = array(
            'update'         => new Process($console . ' oro:entity-extend:update-config --env ' . $env),
            'schemaUpdate'   => new Process($console . ' oro:entity-extend:update-schema --env ' . $env),
            // TODO: Update foreign keys for extended relation fields (manyToOne, oneToMany, manyToMany)
            // TODO: Should be fixed in scope of https://magecore.atlassian.net/browse/BAP-3621
            'doctrineUpdate' => new Process($console . ' doctrine:schema:update --force --env ' . $env),
            // TODO: Update extended entity cache after during schema update
            // TODO: Should be fixed in scope of https://magecore.atlassian.net/browse/BAP-3652
            'cacheClear' => new Process($console . ' cache:clear --env ' . $env),
        );

        // put system in maintenance mode
        $this->maintenance->on();

        register_shutdown_function(
            function ($maintenance) {
                /** @var MaintenanceMode $maintenance */
                $maintenance->off();
            },
            $this->maintenance
        );

        $exitCode = 0;
        foreach ($commands as $command) {
            /** @var $command Process */
            $code = $command->run();
            if ($code !== 0) {
                $exitCode = $code;
            }
        }

        $isSuccess = $exitCode === 0;

        if ($isSuccess && $generateProxies) {
            $this->generateProxies();
        }

        return $isSuccess;
    }

    /**
     * Generate doctrine proxy classes for extended entities
     */
    public function generateProxies()
    {
        $em = $this->configManager->getEntityManager();

        $isAutoGenerated = $em->getConfiguration()->getAutoGenerateProxyClasses();
        if (!$isAutoGenerated) {
            $extendEntities = $this->configManager->getProvider('extend')->filter(
                function (ConfigInterface $config) {
                    return $config->is('is_extend');
                }
            );

            /** @var ConfigInterface[] $extendEntities */
            foreach ($extendEntities as $entity) {
                $proxyFileName = $em->getConfiguration()->getProxyDir()
                    . DIRECTORY_SEPARATOR . '__CG__' . str_replace('\\', '', $entity->getId()->getClassName()) . '.php';
                if (!file_exists($proxyFileName)) {
                    $proxyFactory = $em->getProxyFactory();
                    $proxyDir     = $em->getConfiguration()->getProxyDir();
                    $meta         = $em->getClassMetadata($entity->getId()->getClassName());

                    $proxyFactory->generateProxyClasses([$meta], $proxyDir);
                }
            }
        }
    }

    /**
     * @return string
     * @throws \RuntimeException
     */
    protected function getPhp()
    {
        $phpFinder = new PhpExecutableFinder();
        if (!$phpPath = $phpFinder->find()) {
            throw new \RuntimeException(
                'The php executable could not be found, add it to your PATH environment variable and try again'
            );
        }

        return $phpPath;
    }
}
